---
name: Continuous Deployment

on:
  push:
    branches:
      - "production"

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   services:
  #     postgres:
  #       image: postgres:11
  #       ports: ["5432:5432"]
  #       env:
  #         POSTGRES_USER: bot
  #         POSTGRES_DB: interflux_test
  #         POSTGRES_PASSWORD: password
  #   env:
  #     RAILS_ENV: test
  #     PG_HOST: localhost
  #     PG_USER: bot
  #     PG_DATABASE: interflux_test
  #     PG_PASSWORD: password
  #     JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}
  #     IP_GEO_API_KEY: ${{ secrets.TEST_IP_GEO_API_KEY }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #     - run: bin/rails db:create
  #     - run: bin/rails db:schema:load
  #     - run: bin/rails test --verbose

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # needs: test
    env:
      URL: admin@frankfurt.server.interflux.com
      HOST: frankfurt.server.interflux.com
      ROOT: /var/www/rails.api.interflux.com/
      SSH: ${{ secrets.SSH_FRANKFURT }}

    steps:
      # Git clone the code base to worker
      - uses: actions/checkout@v2

      # Create directory for SSH
      - run: mkdir ~/.ssh

      # # Add the SSH key
      - run: 'echo "$SSH_FRANKFURT" > ~/.ssh/$URL'

      # # Configure SSH to always use the custom key, so we don't have to do ssh -i
      - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'

      # # Add the remote server to trusted hosts
      - run: ssh-keyscan -H frankfurt.server.interflux.com > ~/.ssh/known_hosts

      # # Set all SSH file permissions
      - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts

      - run: ssh-add -l
      - run: ssh-add ~/.ssh/$URL
      - run: ssh-add -l
      # - name: Set up SSH
      #   run: |
      #     'echo "$SSH_FRANKFURT" > ~/.ssh/$URL'
      #     'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'
      #     ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts
      #     chmod 0755 ~/.ssh/
      #     chmod 600 ~/.ssh/$URL
      #     chmod 644 ~/.ssh/known_hosts
      - run: ssh -v $URL "cd $ROOT; ls -la"
      # - name: Back up database
      #   run: |
      #     echo "TIMESTAMP=$(date -u +"%Y-%m-%d-%H%M%S")-UTC" >> $GITHUB_ENV
      #     ssh $URL "cd $ROOT; bin/rails db:data:dump_dir dir=backups/$TIMESTAMP"
      # - name: Pull the latest production code
      #   run: ssh $URL "cd $ROOT; git checkout production; git pull"
      # - name: Install Ruby
      #   run: ssh $URL "cd $ROOT; rbenv install --skip-existing"
      # - name: Install Bundler
      #   run: ssh $URL "cd $ROOT; gem install bundler -v "$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1)"
      # - name: Install gems
      #   run: ssh $URL "cd $ROOT; bundle install"
      # - name: Migrate database
      #   run: ssh $URL "cd $ROOT; bin/rails db:migrate"
      # - name: Restart Puma
      #   run: ssh $URL "cd $ROOT; bin/pumactl -F config/puma/production.rb -T '12345' stop; bin/pumactl -F config/puma/production.rb -T '12345' start"

      # Here we perform a sanity check to test that:
      # 1. The API is up, running and responding
      # 2. The API is running the latest code
      # We do this by curl-ing a public end point which returns status 200 and the latest Git revision.
      # - name: Sanity check
      #   run: |
      #     sudo apt-get install jq
      #     'echo "JSON=$(curl --silent https://api.interflux.com/sanity-check -H ''Content-Type: application/vnd.api+json'')" >> $GITHUB_ENV'
      #     'echo "$JSON" | jq .'
      #     'echo "STATUS=$(echo "$JSON" | jq .status)" >> $GITHUB_ENV'
      #     'echo "API_REVISION=$(echo "$JSON" | jq -r .build.git.revision)" >> $GITHUB_ENV'

      # Fail the work flow, something is wrong.
      # - name: "Sanity check: FAIL"
      #   run: exit -1
      #   if: env.API_REVISION != env.REVISION || env.STATUS != 200

      # All green, deploy was successful!
      # - name: "Sanity check: PASS"
      #   if: env.API_REVISION == env.REVISION && env.STATUS == 200
      #   run: exit 0

  deploy_old:
    name: Deploy
    runs-on: ubuntu-latest
    # needs: test
    env:
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      URL: bot@server.interflux.com
      DOMAIN: api.interflux.com
      BRANCH: production
      ROOT: /var/www/api.interflux.com
    steps:
      - uses: actions/checkout@v2
      # - run: sudo apt-get install jq
      # - run: echo "REVISION=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
      # - run: echo "BUILD="builds/$BRANCH/$REVISION/"" >> $GITHUB_ENV
      # - run: echo "TIMESTAMP=$(date -u +"%Y-%m-%d-%H%M%S")-UTC" >> $GITHUB_ENV

      # Create directory for SSH
      - run: mkdir ~/.ssh

      # Add the private key of the restricted bot user on the remote server
      - run: 'echo "$PRIVATE_KEY" > ~/.ssh/$URL'

      # Configure SSH to always use the custom key, so we don't have to do ssh -i
      - run: 'echo "IdentityFile ~/.ssh/$URL" > ~/.ssh/config'

      # Add the remote server to trusted hosts
      - run: ssh-keyscan -H server.interflux.com > ~/.ssh/known_hosts

      # Set all SSH file permissions
      - run: chmod 0755 ~/.ssh/; chmod 600 ~/.ssh/$URL; chmod 644 ~/.ssh/known_hosts

      - run: ssh -v $URL "cd $ROOT; ls -la"
  #     # Backup the database
  #     - run: ssh $URL "cd $ROOT/builds/production/latest; export RAILS_ENV=production; bin/rails db:data:dump_dir dir=$TIMESTAMP; mv db/$TIMESTAMP/ /var/www/api.interflux.com/db/production-$TIMESTAMP/"

  #     # Prepare the build directory
  #     - run: ssh $URL "cd $ROOT; rm -rf builds/$BRANCH/$REVISION/; mkdir builds/$BRANCH/$REVISION/"

  #     # Pull in the latest changes from Git and deploy the latest production into the new directory.
  #     - run: ssh $URL "cd $ROOT; git --git-dir=repo fetch; git --git-dir=repo --work-tree=builds/$BRANCH/$REVISION checkout $REVISION -f"

  #     # Make log directory writable
  #     - run: ssh $URL "cd $ROOT/$BUILD; chmod -R g+w ./log/"

  #     # Make tmp directory writable
  #     - run: ssh $URL "cd $ROOT/$BUILD; chmod -R g+w ./tmp/"

  #     # Set up variables for rbenv to port into Rails
  #     - run: ssh $URL "cd $ROOT/$BUILD; echo \"GIT_BRANCH=$BRANCH\" >> .rbenv-vars; echo \"GIT_REVISION=$REVISION\" >> .rbenv-vars; echo \"BUILD_TIMESTAMP=$TIMESTAMP\" >> .rbenv-vars"

  #     # Install Ruby
  #     - run: ssh $URL "cd $ROOT/$BUILD; rbenv install -s"

  #     # Install Bundler
  #     # - run: ssh $URL "cd $ROOT/$BUILD; gem install bundler"
  #     - run: ssh $URL "cd $ROOT/$BUILD; gem install bundler:2.4.6"

  #     # Install gems
  #     - run: ssh $URL "cd $ROOT/$BUILD; bin/bundle install"

  #     # Migrate the database
  #     - run: ssh $URL "cd $ROOT/$BUILD; export RAILS_ENV=production; bin/rails db:migrate --verbose"

  #     # Create a symbolic links.
  #     - run: ssh $URL "ln -nsf $ROOT/builds/$BRANCH/$REVISION $ROOT/builds/$BRANCH/latest; ln -nsf $ROOT/db/production-$TIMESTAMP $ROOT/db/before-last-deploy"

  #     # Restart the Puma app server.
  #     # From this moment onwards Puma will serve the Rails app we just deployed and no longer the old one.
  #     # We conciously avoid Puma's "phased-restart" and "restart" because these have issues.
  #     - run: ssh $URL "cd $ROOT/$BUILD; bin/pumactl -F config/puma/production.rb -T '12345' stop; bin/pumactl -F config/puma/production.rb -T '12345' start"

  #     # Set permissions for log files
  #     - run: ssh $URL "cd $ROOT/$BUILD; ls -la log/; chmod g+w log/production.log; chmod g+w log/skylight.log; chmod g+w log/skylight.native.log; ls -la log/"

  #     # Clean up time! Remove all builds except the one that was just deployed.
  #     # The find command behaves a bit different in Fish, compared to Bash:
  #     # https://unix.stackexchange.com/questions/301225/find-exec-not-working-in-fish
  #     # - run: ssh $URL "cd $ROOT/; find builds/production/ -type d -mindepth 1 -maxdepth 1 -not -name $REVISION -exec rm -rf '{}' +"

  #     # Here we perform a sanity check to test that:
  #     # 1. The API is up, running and responding
  #     # 2. The API is running the latest code
  #     # We do this by curl-ing a public end point which returns status 200 and the latest Git revision.
  #     - run: 'echo "JSON=$(curl --silent https://api.interflux.com/sanity-check -H ''Content-Type: application/vnd.api+json'')" >> $GITHUB_ENV'
  #     - run: 'echo "$JSON" | jq .'
  #     - run: 'echo "STATUS=$(echo "$JSON" | jq .status)" >> $GITHUB_ENV'
  #     - run: 'echo "API_REVISION=$(echo "$JSON" | jq -r .build.git.revision)" >> $GITHUB_ENV'

  #     # Fail the work flow, something is wrong.
  #     - name: "Sanity check: FAIL"
  #       run: exit -1
  #       if: env.API_REVISION != env.REVISION || env.STATUS != 200

  #     # All green, deploy was successful!
  #     - name: "Sanity check: PASS"
  #       if: env.API_REVISION == env.REVISION && env.STATUS == 200
  #       run: exit 0
